// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: qwrap.proto

package qwrappb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AgentStatus int32

const (
	AgentStatus_AGENT_STATUS_UNKNOWN     AgentStatus = 0
	AgentStatus_AGENT_STATUS_REGISTERING AgentStatus = 1
	AgentStatus_AGENT_STATUS_IDLE        AgentStatus = 2
	AgentStatus_AGENT_STATUS_ACTIVE      AgentStatus = 3
	AgentStatus_AGENT_STATUS_DEGRADED    AgentStatus = 4
	AgentStatus_AGENT_STATUS_UNAVAILABLE AgentStatus = 5
	AgentStatus_AGENT_STATUS_ERROR       AgentStatus = 6
)

// Enum value maps for AgentStatus.
var (
	AgentStatus_name = map[int32]string{
		0: "AGENT_STATUS_UNKNOWN",
		1: "AGENT_STATUS_REGISTERING",
		2: "AGENT_STATUS_IDLE",
		3: "AGENT_STATUS_ACTIVE",
		4: "AGENT_STATUS_DEGRADED",
		5: "AGENT_STATUS_UNAVAILABLE",
		6: "AGENT_STATUS_ERROR",
	}
	AgentStatus_value = map[string]int32{
		"AGENT_STATUS_UNKNOWN":     0,
		"AGENT_STATUS_REGISTERING": 1,
		"AGENT_STATUS_IDLE":        2,
		"AGENT_STATUS_ACTIVE":      3,
		"AGENT_STATUS_DEGRADED":    4,
		"AGENT_STATUS_UNAVAILABLE": 5,
		"AGENT_STATUS_ERROR":       6,
	}
)

func (x AgentStatus) Enum() *AgentStatus {
	p := new(AgentStatus)
	*p = x
	return p
}

func (x AgentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qwrap_proto_enumTypes[0].Descriptor()
}

func (AgentStatus) Type() protoreflect.EnumType {
	return &file_qwrap_proto_enumTypes[0]
}

func (x AgentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentStatus.Descriptor instead.
func (AgentStatus) EnumDescriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{0}
}

type ChecksumAlgorithm int32

const (
	ChecksumAlgorithm_CHECKSUM_ALGORITHM_UNKNOWN ChecksumAlgorithm = 0
	ChecksumAlgorithm_SHA256                     ChecksumAlgorithm = 1
	ChecksumAlgorithm_SHA512                     ChecksumAlgorithm = 2
	ChecksumAlgorithm_MD5                        ChecksumAlgorithm = 3
	ChecksumAlgorithm_XXHASH64                   ChecksumAlgorithm = 4
)

// Enum value maps for ChecksumAlgorithm.
var (
	ChecksumAlgorithm_name = map[int32]string{
		0: "CHECKSUM_ALGORITHM_UNKNOWN",
		1: "SHA256",
		2: "SHA512",
		3: "MD5",
		4: "XXHASH64",
	}
	ChecksumAlgorithm_value = map[string]int32{
		"CHECKSUM_ALGORITHM_UNKNOWN": 0,
		"SHA256":                     1,
		"SHA512":                     2,
		"MD5":                        3,
		"XXHASH64":                   4,
	}
)

func (x ChecksumAlgorithm) Enum() *ChecksumAlgorithm {
	p := new(ChecksumAlgorithm)
	*p = x
	return p
}

func (x ChecksumAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChecksumAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_qwrap_proto_enumTypes[1].Descriptor()
}

func (ChecksumAlgorithm) Type() protoreflect.EnumType {
	return &file_qwrap_proto_enumTypes[1]
}

func (x ChecksumAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChecksumAlgorithm.Descriptor instead.
func (ChecksumAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{1}
}

type TransferEvent int32

const (
	TransferEvent_TRANSFER_EVENT_UNKNOWN            TransferEvent = 0
	TransferEvent_DOWNLOAD_STARTED                  TransferEvent = 1
	TransferEvent_DOWNLOAD_SUCCESSFUL               TransferEvent = 2
	TransferEvent_DOWNLOAD_FAILED_AGENT_UNREACHABLE TransferEvent = 3
	TransferEvent_DOWNLOAD_FAILED_TRANSFER_ERROR    TransferEvent = 4
	TransferEvent_DOWNLOAD_FAILED_CHECKSUM_MISMATCH TransferEvent = 5
	TransferEvent_REASSIGNMENT_REQUESTED            TransferEvent = 6
)

// Enum value maps for TransferEvent.
var (
	TransferEvent_name = map[int32]string{
		0: "TRANSFER_EVENT_UNKNOWN",
		1: "DOWNLOAD_STARTED",
		2: "DOWNLOAD_SUCCESSFUL",
		3: "DOWNLOAD_FAILED_AGENT_UNREACHABLE",
		4: "DOWNLOAD_FAILED_TRANSFER_ERROR",
		5: "DOWNLOAD_FAILED_CHECKSUM_MISMATCH",
		6: "REASSIGNMENT_REQUESTED",
	}
	TransferEvent_value = map[string]int32{
		"TRANSFER_EVENT_UNKNOWN":            0,
		"DOWNLOAD_STARTED":                  1,
		"DOWNLOAD_SUCCESSFUL":               2,
		"DOWNLOAD_FAILED_AGENT_UNREACHABLE": 3,
		"DOWNLOAD_FAILED_TRANSFER_ERROR":    4,
		"DOWNLOAD_FAILED_CHECKSUM_MISMATCH": 5,
		"REASSIGNMENT_REQUESTED":            6,
	}
)

func (x TransferEvent) Enum() *TransferEvent {
	p := new(TransferEvent)
	*p = x
	return p
}

func (x TransferEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_qwrap_proto_enumTypes[2].Descriptor()
}

func (TransferEvent) Type() protoreflect.EnumType {
	return &file_qwrap_proto_enumTypes[2]
}

func (x TransferEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferEvent.Descriptor instead.
func (TransferEvent) EnumDescriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{2}
}

type ChunkErrorCode int32

const (
	ChunkErrorCode_CHUNK_ERROR_UNKNOWN     ChunkErrorCode = 0
	ChunkErrorCode_CHUNK_NOT_FOUND         ChunkErrorCode = 1
	ChunkErrorCode_CHUNK_NOT_AVAILABLE_YET ChunkErrorCode = 2
	ChunkErrorCode_AGENT_OVERLOADED        ChunkErrorCode = 3
	ChunkErrorCode_INTERNAL_AGENT_ERROR    ChunkErrorCode = 4
)

// Enum value maps for ChunkErrorCode.
var (
	ChunkErrorCode_name = map[int32]string{
		0: "CHUNK_ERROR_UNKNOWN",
		1: "CHUNK_NOT_FOUND",
		2: "CHUNK_NOT_AVAILABLE_YET",
		3: "AGENT_OVERLOADED",
		4: "INTERNAL_AGENT_ERROR",
	}
	ChunkErrorCode_value = map[string]int32{
		"CHUNK_ERROR_UNKNOWN":     0,
		"CHUNK_NOT_FOUND":         1,
		"CHUNK_NOT_AVAILABLE_YET": 2,
		"AGENT_OVERLOADED":        3,
		"INTERNAL_AGENT_ERROR":    4,
	}
)

func (x ChunkErrorCode) Enum() *ChunkErrorCode {
	p := new(ChunkErrorCode)
	*p = x
	return p
}

func (x ChunkErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_qwrap_proto_enumTypes[3].Descriptor()
}

func (ChunkErrorCode) Type() protoreflect.EnumType {
	return &file_qwrap_proto_enumTypes[3]
}

func (x ChunkErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkErrorCode.Descriptor instead.
func (ChunkErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{3}
}

type StreamPurposeRequest_Purpose int32

const (
	StreamPurposeRequest_PURPOSE_UNKNOWN            StreamPurposeRequest_Purpose = 0
	StreamPurposeRequest_TRANSFER_REQUEST           StreamPurposeRequest_Purpose = 1 // Client veut un plan
	StreamPurposeRequest_CLIENT_REPORT              StreamPurposeRequest_Purpose = 2 // Client envoie des statuts de chunks
	StreamPurposeRequest_REGISTER_FOR_PLAN_UPDATES  StreamPurposeRequest_Purpose = 3 // Client veut Ã©couter les UpdatedTransferPlan
	StreamPurposeRequest_AGENT_REGISTRATION         StreamPurposeRequest_Purpose = 4 // Agent veut s'enregistrer
	StreamPurposeRequest_AGENT_HEARTBEAT            StreamPurposeRequest_Purpose = 5 // Agent envoie un heartbeat
	StreamPurposeRequest_GET_FILE_METADATA_REQUEST  StreamPurposeRequest_Purpose = 6
	StreamPurposeRequest_GET_FILE_METADATA_RESPONSE StreamPurposeRequest_Purpose = 7
	StreamPurposeRequest_CHUNK_REQUEST              StreamPurposeRequest_Purpose = 8
)

// Enum value maps for StreamPurposeRequest_Purpose.
var (
	StreamPurposeRequest_Purpose_name = map[int32]string{
		0: "PURPOSE_UNKNOWN",
		1: "TRANSFER_REQUEST",
		2: "CLIENT_REPORT",
		3: "REGISTER_FOR_PLAN_UPDATES",
		4: "AGENT_REGISTRATION",
		5: "AGENT_HEARTBEAT",
		6: "GET_FILE_METADATA_REQUEST",
		7: "GET_FILE_METADATA_RESPONSE",
		8: "CHUNK_REQUEST",
	}
	StreamPurposeRequest_Purpose_value = map[string]int32{
		"PURPOSE_UNKNOWN":            0,
		"TRANSFER_REQUEST":           1,
		"CLIENT_REPORT":              2,
		"REGISTER_FOR_PLAN_UPDATES":  3,
		"AGENT_REGISTRATION":         4,
		"AGENT_HEARTBEAT":            5,
		"GET_FILE_METADATA_REQUEST":  6,
		"GET_FILE_METADATA_RESPONSE": 7,
		"CHUNK_REQUEST":              8,
	}
)

func (x StreamPurposeRequest_Purpose) Enum() *StreamPurposeRequest_Purpose {
	p := new(StreamPurposeRequest_Purpose)
	*p = x
	return p
}

func (x StreamPurposeRequest_Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamPurposeRequest_Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_qwrap_proto_enumTypes[4].Descriptor()
}

func (StreamPurposeRequest_Purpose) Type() protoreflect.EnumType {
	return &file_qwrap_proto_enumTypes[4]
}

func (x StreamPurposeRequest_Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamPurposeRequest_Purpose.Descriptor instead.
func (StreamPurposeRequest_Purpose) EnumDescriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{0, 0}
}

type StreamPurposeRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Purpose       StreamPurposeRequest_Purpose `protobuf:"varint,1,opt,name=purpose,proto3,enum=qwrap_proto.StreamPurposeRequest_Purpose" json:"purpose,omitempty"`
	PlanIdContext string                       `protobuf:"bytes,2,opt,name=plan_id_context,json=planIdContext,proto3" json:"plan_id_context,omitempty"` // Optionnel, ex: pour REGISTER_FOR_PLAN_UPDATES
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPurposeRequest) Reset() {
	*x = StreamPurposeRequest{}
	mi := &file_qwrap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPurposeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPurposeRequest) ProtoMessage() {}

func (x *StreamPurposeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPurposeRequest.ProtoReflect.Descriptor instead.
func (*StreamPurposeRequest) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{0}
}

func (x *StreamPurposeRequest) GetPurpose() StreamPurposeRequest_Purpose {
	if x != nil {
		return x.Purpose
	}
	return StreamPurposeRequest_PURPOSE_UNKNOWN
}

func (x *StreamPurposeRequest) GetPlanIdContext() string {
	if x != nil {
		return x.PlanIdContext
	}
	return ""
}

type ByteRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        int64                  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Length        int64                  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ByteRange) Reset() {
	*x = ByteRange{}
	mi := &file_qwrap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ByteRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteRange) ProtoMessage() {}

func (x *ByteRange) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteRange.ProtoReflect.Descriptor instead.
func (*ByteRange) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{1}
}

func (x *ByteRange) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ByteRange) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type FileMetadata struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FileId            string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	TotalSize         int64                  `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	ChecksumAlgorithm ChecksumAlgorithm      `protobuf:"varint,3,opt,name=checksum_algorithm,json=checksumAlgorithm,proto3,enum=qwrap_proto.ChecksumAlgorithm" json:"checksum_algorithm,omitempty"`
	ChecksumValue     string                 `protobuf:"bytes,4,opt,name=checksum_value,json=checksumValue,proto3" json:"checksum_value,omitempty"`
	LastModified      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	CustomAttributes  map[string]string      `protobuf:"bytes,6,rep,name=custom_attributes,json=customAttributes,proto3" json:"custom_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	mi := &file_qwrap_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{2}
}

func (x *FileMetadata) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileMetadata) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *FileMetadata) GetChecksumAlgorithm() ChecksumAlgorithm {
	if x != nil {
		return x.ChecksumAlgorithm
	}
	return ChecksumAlgorithm_CHECKSUM_ALGORITHM_UNKNOWN
}

func (x *FileMetadata) GetChecksumValue() string {
	if x != nil {
		return x.ChecksumValue
	}
	return ""
}

func (x *FileMetadata) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *FileMetadata) GetCustomAttributes() map[string]string {
	if x != nil {
		return x.CustomAttributes
	}
	return nil
}

// ==================== Messages Orchestrateur <-> Agent ====================
type AgentRegistrationRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AgentId              string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentAddress         string                 `protobuf:"bytes,2,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	Capabilities         []string               `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	MaxConcurrentStreams int64                  `protobuf:"varint,4,opt,name=max_concurrent_streams,json=maxConcurrentStreams,proto3" json:"max_concurrent_streams,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AgentRegistrationRequest) Reset() {
	*x = AgentRegistrationRequest{}
	mi := &file_qwrap_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRegistrationRequest) ProtoMessage() {}

func (x *AgentRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRegistrationRequest.ProtoReflect.Descriptor instead.
func (*AgentRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{3}
}

func (x *AgentRegistrationRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AgentRegistrationRequest) GetAgentAddress() string {
	if x != nil {
		return x.AgentAddress
	}
	return ""
}

func (x *AgentRegistrationRequest) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *AgentRegistrationRequest) GetMaxConcurrentStreams() int64 {
	if x != nil {
		return x.MaxConcurrentStreams
	}
	return 0
}

type AgentRegistrationResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Success           bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message           string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	HeartbeatInterval *durationpb.Duration   `protobuf:"bytes,3,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AgentRegistrationResponse) Reset() {
	*x = AgentRegistrationResponse{}
	mi := &file_qwrap_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRegistrationResponse) ProtoMessage() {}

func (x *AgentRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRegistrationResponse.ProtoReflect.Descriptor instead.
func (*AgentRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{4}
}

func (x *AgentRegistrationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AgentRegistrationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AgentRegistrationResponse) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

type AgentHeartbeat struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AgentId                 string                 `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Timestamp               *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status                  AgentStatus            `protobuf:"varint,3,opt,name=status,proto3,enum=qwrap_proto.AgentStatus" json:"status,omitempty"`
	CpuLoadPercent          float32                `protobuf:"fixed32,4,opt,name=cpu_load_percent,json=cpuLoadPercent,proto3" json:"cpu_load_percent,omitempty"`
	MemoryUsageBytes        int64                  `protobuf:"varint,5,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty"`
	AvailableBandwidthBps   int64                  `protobuf:"varint,6,opt,name=available_bandwidth_bps,json=availableBandwidthBps,proto3" json:"available_bandwidth_bps,omitempty"`
	ActiveClientConnections int32                  `protobuf:"varint,7,opt,name=active_client_connections,json=activeClientConnections,proto3" json:"active_client_connections,omitempty"`
	ActiveChunkTransfers    int32                  `protobuf:"varint,8,opt,name=active_chunk_transfers,json=activeChunkTransfers,proto3" json:"active_chunk_transfers,omitempty"`
	CustomMetrics           map[string]string      `protobuf:"bytes,9,rep,name=custom_metrics,json=customMetrics,proto3" json:"custom_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AgentHeartbeat) Reset() {
	*x = AgentHeartbeat{}
	mi := &file_qwrap_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHeartbeat) ProtoMessage() {}

func (x *AgentHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHeartbeat.ProtoReflect.Descriptor instead.
func (*AgentHeartbeat) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{5}
}

func (x *AgentHeartbeat) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AgentHeartbeat) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AgentHeartbeat) GetStatus() AgentStatus {
	if x != nil {
		return x.Status
	}
	return AgentStatus_AGENT_STATUS_UNKNOWN
}

func (x *AgentHeartbeat) GetCpuLoadPercent() float32 {
	if x != nil {
		return x.CpuLoadPercent
	}
	return 0
}

func (x *AgentHeartbeat) GetMemoryUsageBytes() int64 {
	if x != nil {
		return x.MemoryUsageBytes
	}
	return 0
}

func (x *AgentHeartbeat) GetAvailableBandwidthBps() int64 {
	if x != nil {
		return x.AvailableBandwidthBps
	}
	return 0
}

func (x *AgentHeartbeat) GetActiveClientConnections() int32 {
	if x != nil {
		return x.ActiveClientConnections
	}
	return 0
}

func (x *AgentHeartbeat) GetActiveChunkTransfers() int32 {
	if x != nil {
		return x.ActiveChunkTransfers
	}
	return 0
}

func (x *AgentHeartbeat) GetCustomMetrics() map[string]string {
	if x != nil {
		return x.CustomMetrics
	}
	return nil
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_qwrap_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{6}
}

type GetFileMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // ID unique pour cette requÃªte de mÃ©tadonnÃ©es
	FileId        string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`          // L'ID du fichier dont on veut les mÃ©tadonnÃ©es
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileMetadataRequest) Reset() {
	*x = GetFileMetadataRequest{}
	mi := &file_qwrap_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileMetadataRequest) ProtoMessage() {}

func (x *GetFileMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetFileMetadataRequest) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{7}
}

func (x *GetFileMetadataRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetFileMetadataRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// DÃ©crit une portion contiguÃ« d'un fichier global dÃ©tenue par un agent.
type FilePortionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifiant unique du fichier global auquel cette portion appartient.
	GlobalFileId string `protobuf:"bytes,1,opt,name=global_file_id,json=globalFileId,proto3" json:"global_file_id,omitempty"`
	// Position de dÃ©but de la portion dans le fichier global (en octets).
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Nombre total de chunks dans cette portion. Doit Ãªtre >= 1.
	NumChunks int64 `protobuf:"varint,3,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
	// Taille standard de chaque chunk dans cette portion (en octets).
	ChunkSize int64 `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	// Taille du dernier chunk, si elle est diffÃ©rente de chunk_size.
	// Si non spÃ©cifiÃ© (ou 0), tous les chunks ont la mÃªme taille.
	LastChunkSize *int64 `protobuf:"varint,5,opt,name=last_chunk_size,json=lastChunkSize,proto3,oneof" json:"last_chunk_size,omitempty"`
	// Index global du premier chunk couvert par cette portion.
	ChunkIndexStart uint64 `protobuf:"varint,6,opt,name=chunk_index_start,json=chunkIndexStart,proto3" json:"chunk_index_start,omitempty"`
	// Index global du dernier chunk couvert par cette portion.
	ChunkIndexEnd uint64 `protobuf:"varint,7,opt,name=chunk_index_end,json=chunkIndexEnd,proto3" json:"chunk_index_end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilePortionInfo) Reset() {
	*x = FilePortionInfo{}
	mi := &file_qwrap_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilePortionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePortionInfo) ProtoMessage() {}

func (x *FilePortionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePortionInfo.ProtoReflect.Descriptor instead.
func (*FilePortionInfo) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{8}
}

func (x *FilePortionInfo) GetGlobalFileId() string {
	if x != nil {
		return x.GlobalFileId
	}
	return ""
}

func (x *FilePortionInfo) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FilePortionInfo) GetNumChunks() int64 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

func (x *FilePortionInfo) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *FilePortionInfo) GetLastChunkSize() int64 {
	if x != nil && x.LastChunkSize != nil {
		return *x.LastChunkSize
	}
	return 0
}

func (x *FilePortionInfo) GetChunkIndexStart() uint64 {
	if x != nil {
		return x.ChunkIndexStart
	}
	return 0
}

func (x *FilePortionInfo) GetChunkIndexEnd() uint64 {
	if x != nil {
		return x.ChunkIndexEnd
	}
	return 0
}

type GetFileMetadataResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RequestId          string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                                    // Rappel de l'ID de la requÃªte
	AgentId            string                 `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`                                          // ID de l'agent qui rÃ©pond
	GlobalFileMetadata *FileMetadata          `protobuf:"bytes,3,opt,name=global_file_metadata,json=globalFileMetadata,proto3,oneof" json:"global_file_metadata,omitempty"` // Les mÃ©tadonnÃ©es globales du fichier, si l'agent les connaÃ®t.
	Found              bool                   `protobuf:"varint,4,opt,name=found,proto3" json:"found,omitempty"`                                                            // True si l'agent a des informations sur ce fichier (mÃªme sans dÃ©tenir de portion)
	ErrorMessage       string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                           // Message d'erreur si found est false ou si problÃ¨me
	// Liste des portions du fichier que cet agent dÃ©tient. Vide si aucune.
	AvailablePortions []*FilePortionInfo `protobuf:"bytes,6,rep,name=available_portions,json=availablePortions,proto3" json:"available_portions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetFileMetadataResponse) Reset() {
	*x = GetFileMetadataResponse{}
	mi := &file_qwrap_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileMetadataResponse) ProtoMessage() {}

func (x *GetFileMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetFileMetadataResponse) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{9}
}

func (x *GetFileMetadataResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetFileMetadataResponse) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *GetFileMetadataResponse) GetGlobalFileMetadata() *FileMetadata {
	if x != nil {
		return x.GlobalFileMetadata
	}
	return nil
}

func (x *GetFileMetadataResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *GetFileMetadataResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetFileMetadataResponse) GetAvailablePortions() []*FilePortionInfo {
	if x != nil {
		return x.AvailablePortions
	}
	return nil
}

// ==================== Messages Client <-> Orchestrateur ====================
type TransferOptions struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Priority             int32                  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	VerifyChunkChecksums bool                   `protobuf:"varint,2,opt,name=verify_chunk_checksums,json=verifyChunkChecksums,proto3" json:"verify_chunk_checksums,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TransferOptions) Reset() {
	*x = TransferOptions{}
	mi := &file_qwrap_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOptions) ProtoMessage() {}

func (x *TransferOptions) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOptions.ProtoReflect.Descriptor instead.
func (*TransferOptions) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{10}
}

func (x *TransferOptions) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TransferOptions) GetVerifyChunkChecksums() bool {
	if x != nil {
		return x.VerifyChunkChecksums
	}
	return false
}

type TransferRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RequestId       string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FilesToTransfer []*FileMetadata        `protobuf:"bytes,2,rep,name=files_to_transfer,json=filesToTransfer,proto3" json:"files_to_transfer,omitempty"`
	Options         *TransferOptions       `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	mi := &file_qwrap_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{11}
}

func (x *TransferRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TransferRequest) GetFilesToTransfer() []*FileMetadata {
	if x != nil {
		return x.FilesToTransfer
	}
	return nil
}

func (x *TransferRequest) GetOptions() *TransferOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ChunkInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FileId            string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ChunkId           uint64                 `protobuf:"varint,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Range             *ByteRange             `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"` // <<<<< MODIFIÃ ET ESSENTIEL
	ChecksumAlgorithm ChecksumAlgorithm      `protobuf:"varint,4,opt,name=checksum_algorithm,json=checksumAlgorithm,proto3,enum=qwrap_proto.ChecksumAlgorithm" json:"checksum_algorithm,omitempty"`
	ChecksumValue     string                 `protobuf:"bytes,5,opt,name=checksum_value,json=checksumValue,proto3" json:"checksum_value,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	mi := &file_qwrap_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{12}
}

func (x *ChunkInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ChunkInfo) GetChunkId() uint64 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *ChunkInfo) GetRange() *ByteRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ChunkInfo) GetChecksumAlgorithm() ChecksumAlgorithm {
	if x != nil {
		return x.ChecksumAlgorithm
	}
	return ChecksumAlgorithm_CHECKSUM_ALGORITHM_UNKNOWN
}

func (x *ChunkInfo) GetChecksumValue() string {
	if x != nil {
		return x.ChecksumValue
	}
	return ""
}

type ChunkAssignment struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	ChunkInfo                 *ChunkInfo             `protobuf:"bytes,1,opt,name=chunk_info,json=chunkInfo,proto3" json:"chunk_info,omitempty"`
	AgentId                   string                 `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentAddress              string                 `protobuf:"bytes,3,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	EstimatedAvailabilityTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=estimated_availability_time,json=estimatedAvailabilityTime,proto3" json:"estimated_availability_time,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ChunkAssignment) Reset() {
	*x = ChunkAssignment{}
	mi := &file_qwrap_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkAssignment) ProtoMessage() {}

func (x *ChunkAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkAssignment.ProtoReflect.Descriptor instead.
func (*ChunkAssignment) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{13}
}

func (x *ChunkAssignment) GetChunkInfo() *ChunkInfo {
	if x != nil {
		return x.ChunkInfo
	}
	return nil
}

func (x *ChunkAssignment) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ChunkAssignment) GetAgentAddress() string {
	if x != nil {
		return x.AgentAddress
	}
	return ""
}

func (x *ChunkAssignment) GetEstimatedAvailabilityTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedAvailabilityTime
	}
	return nil
}

type TransferPlan struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlanId             string                 `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	ClientRequestId    string                 `protobuf:"bytes,2,opt,name=client_request_id,json=clientRequestId,proto3" json:"client_request_id,omitempty"`
	SourceFileMetadata []*FileMetadata        `protobuf:"bytes,3,rep,name=source_file_metadata,json=sourceFileMetadata,proto3" json:"source_file_metadata,omitempty"`
	DefaultChunkSize   int64                  `protobuf:"varint,4,opt,name=default_chunk_size,json=defaultChunkSize,proto3" json:"default_chunk_size,omitempty"` // Peut-Ãªtre moins pertinent si ChunkInfo.Range est toujours utilisÃ©
	ChunkAssignments   []*ChunkAssignment     `protobuf:"bytes,5,rep,name=chunk_assignments,json=chunkAssignments,proto3" json:"chunk_assignments,omitempty"`
	Options            *TransferOptions       `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	ErrorMessage       string                 `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TransferPlan) Reset() {
	*x = TransferPlan{}
	mi := &file_qwrap_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPlan) ProtoMessage() {}

func (x *TransferPlan) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPlan.ProtoReflect.Descriptor instead.
func (*TransferPlan) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{14}
}

func (x *TransferPlan) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *TransferPlan) GetClientRequestId() string {
	if x != nil {
		return x.ClientRequestId
	}
	return ""
}

func (x *TransferPlan) GetSourceFileMetadata() []*FileMetadata {
	if x != nil {
		return x.SourceFileMetadata
	}
	return nil
}

func (x *TransferPlan) GetDefaultChunkSize() int64 {
	if x != nil {
		return x.DefaultChunkSize
	}
	return 0
}

func (x *TransferPlan) GetChunkAssignments() []*ChunkAssignment {
	if x != nil {
		return x.ChunkAssignments
	}
	return nil
}

func (x *TransferPlan) GetOptions() *TransferOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TransferPlan) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ClientReport struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PlanId          string                 `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	ReportTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=report_timestamp,json=reportTimestamp,proto3" json:"report_timestamp,omitempty"`
	ChunkStatuses   []*ChunkTransferStatus `protobuf:"bytes,3,rep,name=chunk_statuses,json=chunkStatuses,proto3" json:"chunk_statuses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClientReport) Reset() {
	*x = ClientReport{}
	mi := &file_qwrap_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientReport) ProtoMessage() {}

func (x *ClientReport) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientReport.ProtoReflect.Descriptor instead.
func (*ClientReport) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{15}
}

func (x *ClientReport) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *ClientReport) GetReportTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

func (x *ClientReport) GetChunkStatuses() []*ChunkTransferStatus {
	if x != nil {
		return x.ChunkStatuses
	}
	return nil
}

type ChunkTransferStatus struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ChunkInfo        *ChunkInfo             `protobuf:"bytes,1,opt,name=chunk_info,json=chunkInfo,proto3" json:"chunk_info,omitempty"`
	Event            TransferEvent          `protobuf:"varint,2,opt,name=event,proto3,enum=qwrap_proto.TransferEvent" json:"event,omitempty"`
	AgentId          string                 `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Details          string                 `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	TransferDuration *durationpb.Duration   `protobuf:"bytes,5,opt,name=transfer_duration,json=transferDuration,proto3" json:"transfer_duration,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ChunkTransferStatus) Reset() {
	*x = ChunkTransferStatus{}
	mi := &file_qwrap_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkTransferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkTransferStatus) ProtoMessage() {}

func (x *ChunkTransferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkTransferStatus.ProtoReflect.Descriptor instead.
func (*ChunkTransferStatus) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{16}
}

func (x *ChunkTransferStatus) GetChunkInfo() *ChunkInfo {
	if x != nil {
		return x.ChunkInfo
	}
	return nil
}

func (x *ChunkTransferStatus) GetEvent() TransferEvent {
	if x != nil {
		return x.Event
	}
	return TransferEvent_TRANSFER_EVENT_UNKNOWN
}

func (x *ChunkTransferStatus) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ChunkTransferStatus) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *ChunkTransferStatus) GetTransferDuration() *durationpb.Duration {
	if x != nil {
		return x.TransferDuration
	}
	return nil
}

type UpdatedTransferPlan struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	PlanId                  string                 `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	NewOrUpdatedAssignments []*ChunkAssignment     `protobuf:"bytes,2,rep,name=new_or_updated_assignments,json=newOrUpdatedAssignments,proto3" json:"new_or_updated_assignments,omitempty"`
	InvalidatedChunks       []*ChunkInfo           `protobuf:"bytes,3,rep,name=invalidated_chunks,json=invalidatedChunks,proto3" json:"invalidated_chunks,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UpdatedTransferPlan) Reset() {
	*x = UpdatedTransferPlan{}
	mi := &file_qwrap_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatedTransferPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedTransferPlan) ProtoMessage() {}

func (x *UpdatedTransferPlan) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedTransferPlan.ProtoReflect.Descriptor instead.
func (*UpdatedTransferPlan) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{17}
}

func (x *UpdatedTransferPlan) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *UpdatedTransferPlan) GetNewOrUpdatedAssignments() []*ChunkAssignment {
	if x != nil {
		return x.NewOrUpdatedAssignments
	}
	return nil
}

func (x *UpdatedTransferPlan) GetInvalidatedChunks() []*ChunkInfo {
	if x != nil {
		return x.InvalidatedChunks
	}
	return nil
}

// Message du client pour s'abonner aux mises Ã  jour de plan
type RegisterForPlanUpdatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlanId        string                 `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterForPlanUpdatesRequest) Reset() {
	*x = RegisterForPlanUpdatesRequest{}
	mi := &file_qwrap_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterForPlanUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterForPlanUpdatesRequest) ProtoMessage() {}

func (x *RegisterForPlanUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterForPlanUpdatesRequest.ProtoReflect.Descriptor instead.
func (*RegisterForPlanUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterForPlanUpdatesRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

// ==================== Messages Client <-> Agent ====================
type ChunkRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ChunkInfoRequested *ChunkInfo             `protobuf:"bytes,1,opt,name=chunk_info_requested,json=chunkInfoRequested,proto3" json:"chunk_info_requested,omitempty"` // <<<<< MODIFIÃ: Le client envoie les dÃ©tails complets.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChunkRequest) Reset() {
	*x = ChunkRequest{}
	mi := &file_qwrap_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRequest) ProtoMessage() {}

func (x *ChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRequest.ProtoReflect.Descriptor instead.
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{19}
}

func (x *ChunkRequest) GetChunkInfoRequested() *ChunkInfo {
	if x != nil {
		return x.ChunkInfoRequested
	}
	return nil
}

type ChunkErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`     // Peut Ãªtre extrait de ChunkInfoRequested
	ChunkId       uint64                 `protobuf:"varint,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"` // Peut Ãªtre extrait de ChunkInfoRequested
	ErrorCode     ChunkErrorCode         `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=qwrap_proto.ChunkErrorCode" json:"error_code,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkErrorResponse) Reset() {
	*x = ChunkErrorResponse{}
	mi := &file_qwrap_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkErrorResponse) ProtoMessage() {}

func (x *ChunkErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qwrap_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkErrorResponse.ProtoReflect.Descriptor instead.
func (*ChunkErrorResponse) Descriptor() ([]byte, []int) {
	return file_qwrap_proto_rawDescGZIP(), []int{20}
}

func (x *ChunkErrorResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ChunkErrorResponse) GetChunkId() uint64 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *ChunkErrorResponse) GetErrorCode() ChunkErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ChunkErrorCode_CHUNK_ERROR_UNKNOWN
}

func (x *ChunkErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_qwrap_proto protoreflect.FileDescriptor

const file_qwrap_proto_rawDesc = "" +
	"\n" +
	"\vqwrap.proto\x12\vqwrap_proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\"\xeb\x02\n" +
	"\x14StreamPurposeRequest\x12C\n" +
	"\apurpose\x18\x01 \x01(\x0e2).qwrap_proto.StreamPurposeRequest.PurposeR\apurpose\x12&\n" +
	"\x0fplan_id_context\x18\x02 \x01(\tR\rplanIdContext\"\xe5\x01\n" +
	"\aPurpose\x12\x13\n" +
	"\x0fPURPOSE_UNKNOWN\x10\x00\x12\x14\n" +
	"\x10TRANSFER_REQUEST\x10\x01\x12\x11\n" +
	"\rCLIENT_REPORT\x10\x02\x12\x1d\n" +
	"\x19REGISTER_FOR_PLAN_UPDATES\x10\x03\x12\x16\n" +
	"\x12AGENT_REGISTRATION\x10\x04\x12\x13\n" +
	"\x0fAGENT_HEARTBEAT\x10\x05\x12\x1d\n" +
	"\x19GET_FILE_METADATA_REQUEST\x10\x06\x12\x1e\n" +
	"\x1aGET_FILE_METADATA_RESPONSE\x10\a\x12\x11\n" +
	"\rCHUNK_REQUEST\x10\b\";\n" +
	"\tByteRange\x12\x16\n" +
	"\x06offset\x18\x01 \x01(\x03R\x06offset\x12\x16\n" +
	"\x06length\x18\x02 \x01(\x03R\x06length\"\xa0\x03\n" +
	"\fFileMetadata\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x03R\ttotalSize\x12M\n" +
	"\x12checksum_algorithm\x18\x03 \x01(\x0e2\x1e.qwrap_proto.ChecksumAlgorithmR\x11checksumAlgorithm\x12%\n" +
	"\x0echecksum_value\x18\x04 \x01(\tR\rchecksumValue\x12?\n" +
	"\rlast_modified\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\flastModified\x12\\\n" +
	"\x11custom_attributes\x18\x06 \x03(\v2/.qwrap_proto.FileMetadata.CustomAttributesEntryR\x10customAttributes\x1aC\n" +
	"\x15CustomAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb4\x01\n" +
	"\x18AgentRegistrationRequest\x12\x19\n" +
	"\bagent_id\x18\x01 \x01(\tR\aagentId\x12#\n" +
	"\ragent_address\x18\x02 \x01(\tR\fagentAddress\x12\"\n" +
	"\fcapabilities\x18\x03 \x03(\tR\fcapabilities\x124\n" +
	"\x16max_concurrent_streams\x18\x04 \x01(\x03R\x14maxConcurrentStreams\"\x99\x01\n" +
	"\x19AgentRegistrationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12H\n" +
	"\x12heartbeat_interval\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x11heartbeatInterval\"\xb2\x04\n" +
	"\x0eAgentHeartbeat\x12\x19\n" +
	"\bagent_id\x18\x01 \x01(\tR\aagentId\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x120\n" +
	"\x06status\x18\x03 \x01(\x0e2\x18.qwrap_proto.AgentStatusR\x06status\x12(\n" +
	"\x10cpu_load_percent\x18\x04 \x01(\x02R\x0ecpuLoadPercent\x12,\n" +
	"\x12memory_usage_bytes\x18\x05 \x01(\x03R\x10memoryUsageBytes\x126\n" +
	"\x17available_bandwidth_bps\x18\x06 \x01(\x03R\x15availableBandwidthBps\x12:\n" +
	"\x19active_client_connections\x18\a \x01(\x05R\x17activeClientConnections\x124\n" +
	"\x16active_chunk_transfers\x18\b \x01(\x05R\x14activeChunkTransfers\x12U\n" +
	"\x0ecustom_metrics\x18\t \x03(\v2..qwrap_proto.AgentHeartbeat.CustomMetricsEntryR\rcustomMetrics\x1a@\n" +
	"\x12CustomMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x13\n" +
	"\x11HeartbeatResponse\"P\n" +
	"\x16GetFileMetadataRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\"\xa2\x02\n" +
	"\x0fFilePortionInfo\x12$\n" +
	"\x0eglobal_file_id\x18\x01 \x01(\tR\fglobalFileId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x1d\n" +
	"\n" +
	"num_chunks\x18\x03 \x01(\x03R\tnumChunks\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x04 \x01(\x03R\tchunkSize\x12+\n" +
	"\x0flast_chunk_size\x18\x05 \x01(\x03H\x00R\rlastChunkSize\x88\x01\x01\x12*\n" +
	"\x11chunk_index_start\x18\x06 \x01(\x04R\x0fchunkIndexStart\x12&\n" +
	"\x0fchunk_index_end\x18\a \x01(\x04R\rchunkIndexEndB\x12\n" +
	"\x10_last_chunk_size\"\xc6\x02\n" +
	"\x17GetFileMetadataResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x19\n" +
	"\bagent_id\x18\x02 \x01(\tR\aagentId\x12P\n" +
	"\x14global_file_metadata\x18\x03 \x01(\v2\x19.qwrap_proto.FileMetadataH\x00R\x12globalFileMetadata\x88\x01\x01\x12\x14\n" +
	"\x05found\x18\x04 \x01(\bR\x05found\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12K\n" +
	"\x12available_portions\x18\x06 \x03(\v2\x1c.qwrap_proto.FilePortionInfoR\x11availablePortionsB\x17\n" +
	"\x15_global_file_metadata\"c\n" +
	"\x0fTransferOptions\x12\x1a\n" +
	"\bpriority\x18\x01 \x01(\x05R\bpriority\x124\n" +
	"\x16verify_chunk_checksums\x18\x02 \x01(\bR\x14verifyChunkChecksums\"\xaf\x01\n" +
	"\x0fTransferRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12E\n" +
	"\x11files_to_transfer\x18\x02 \x03(\v2\x19.qwrap_proto.FileMetadataR\x0ffilesToTransfer\x126\n" +
	"\aoptions\x18\x03 \x01(\v2\x1c.qwrap_proto.TransferOptionsR\aoptions\"\xe3\x01\n" +
	"\tChunkInfo\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x19\n" +
	"\bchunk_id\x18\x02 \x01(\x04R\achunkId\x12,\n" +
	"\x05range\x18\x03 \x01(\v2\x16.qwrap_proto.ByteRangeR\x05range\x12M\n" +
	"\x12checksum_algorithm\x18\x04 \x01(\x0e2\x1e.qwrap_proto.ChecksumAlgorithmR\x11checksumAlgorithm\x12%\n" +
	"\x0echecksum_value\x18\x05 \x01(\tR\rchecksumValue\"\xe4\x01\n" +
	"\x0fChunkAssignment\x125\n" +
	"\n" +
	"chunk_info\x18\x01 \x01(\v2\x16.qwrap_proto.ChunkInfoR\tchunkInfo\x12\x19\n" +
	"\bagent_id\x18\x02 \x01(\tR\aagentId\x12#\n" +
	"\ragent_address\x18\x03 \x01(\tR\fagentAddress\x12Z\n" +
	"\x1bestimated_availability_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x19estimatedAvailabilityTime\"\xf6\x02\n" +
	"\fTransferPlan\x12\x17\n" +
	"\aplan_id\x18\x01 \x01(\tR\x06planId\x12*\n" +
	"\x11client_request_id\x18\x02 \x01(\tR\x0fclientRequestId\x12K\n" +
	"\x14source_file_metadata\x18\x03 \x03(\v2\x19.qwrap_proto.FileMetadataR\x12sourceFileMetadata\x12,\n" +
	"\x12default_chunk_size\x18\x04 \x01(\x03R\x10defaultChunkSize\x12I\n" +
	"\x11chunk_assignments\x18\x05 \x03(\v2\x1c.qwrap_proto.ChunkAssignmentR\x10chunkAssignments\x126\n" +
	"\aoptions\x18\x06 \x01(\v2\x1c.qwrap_proto.TransferOptionsR\aoptions\x12#\n" +
	"\rerror_message\x18\a \x01(\tR\ferrorMessage\"\xb7\x01\n" +
	"\fClientReport\x12\x17\n" +
	"\aplan_id\x18\x01 \x01(\tR\x06planId\x12E\n" +
	"\x10report_timestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0freportTimestamp\x12G\n" +
	"\x0echunk_statuses\x18\x03 \x03(\v2 .qwrap_proto.ChunkTransferStatusR\rchunkStatuses\"\xfb\x01\n" +
	"\x13ChunkTransferStatus\x125\n" +
	"\n" +
	"chunk_info\x18\x01 \x01(\v2\x16.qwrap_proto.ChunkInfoR\tchunkInfo\x120\n" +
	"\x05event\x18\x02 \x01(\x0e2\x1a.qwrap_proto.TransferEventR\x05event\x12\x19\n" +
	"\bagent_id\x18\x03 \x01(\tR\aagentId\x12\x18\n" +
	"\adetails\x18\x04 \x01(\tR\adetails\x12F\n" +
	"\x11transfer_duration\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x10transferDuration\"\xd0\x01\n" +
	"\x13UpdatedTransferPlan\x12\x17\n" +
	"\aplan_id\x18\x01 \x01(\tR\x06planId\x12Y\n" +
	"\x1anew_or_updated_assignments\x18\x02 \x03(\v2\x1c.qwrap_proto.ChunkAssignmentR\x17newOrUpdatedAssignments\x12E\n" +
	"\x12invalidated_chunks\x18\x03 \x03(\v2\x16.qwrap_proto.ChunkInfoR\x11invalidatedChunks\"8\n" +
	"\x1dRegisterForPlanUpdatesRequest\x12\x17\n" +
	"\aplan_id\x18\x01 \x01(\tR\x06planId\"X\n" +
	"\fChunkRequest\x12H\n" +
	"\x14chunk_info_requested\x18\x01 \x01(\v2\x16.qwrap_proto.ChunkInfoR\x12chunkInfoRequested\"\x9e\x01\n" +
	"\x12ChunkErrorResponse\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x19\n" +
	"\bchunk_id\x18\x02 \x01(\x04R\achunkId\x12:\n" +
	"\n" +
	"error_code\x18\x03 \x01(\x0e2\x1b.qwrap_proto.ChunkErrorCodeR\terrorCode\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage*\xc6\x01\n" +
	"\vAgentStatus\x12\x18\n" +
	"\x14AGENT_STATUS_UNKNOWN\x10\x00\x12\x1c\n" +
	"\x18AGENT_STATUS_REGISTERING\x10\x01\x12\x15\n" +
	"\x11AGENT_STATUS_IDLE\x10\x02\x12\x17\n" +
	"\x13AGENT_STATUS_ACTIVE\x10\x03\x12\x19\n" +
	"\x15AGENT_STATUS_DEGRADED\x10\x04\x12\x1c\n" +
	"\x18AGENT_STATUS_UNAVAILABLE\x10\x05\x12\x16\n" +
	"\x12AGENT_STATUS_ERROR\x10\x06*b\n" +
	"\x11ChecksumAlgorithm\x12\x1e\n" +
	"\x1aCHECKSUM_ALGORITHM_UNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06SHA256\x10\x01\x12\n" +
	"\n" +
	"\x06SHA512\x10\x02\x12\a\n" +
	"\x03MD5\x10\x03\x12\f\n" +
	"\bXXHASH64\x10\x04*\xe8\x01\n" +
	"\rTransferEvent\x12\x1a\n" +
	"\x16TRANSFER_EVENT_UNKNOWN\x10\x00\x12\x14\n" +
	"\x10DOWNLOAD_STARTED\x10\x01\x12\x17\n" +
	"\x13DOWNLOAD_SUCCESSFUL\x10\x02\x12%\n" +
	"!DOWNLOAD_FAILED_AGENT_UNREACHABLE\x10\x03\x12\"\n" +
	"\x1eDOWNLOAD_FAILED_TRANSFER_ERROR\x10\x04\x12%\n" +
	"!DOWNLOAD_FAILED_CHECKSUM_MISMATCH\x10\x05\x12\x1a\n" +
	"\x16REASSIGNMENT_REQUESTED\x10\x06*\x8b\x01\n" +
	"\x0eChunkErrorCode\x12\x17\n" +
	"\x13CHUNK_ERROR_UNKNOWN\x10\x00\x12\x13\n" +
	"\x0fCHUNK_NOT_FOUND\x10\x01\x12\x1b\n" +
	"\x17CHUNK_NOT_AVAILABLE_YET\x10\x02\x12\x14\n" +
	"\x10AGENT_OVERLOADED\x10\x03\x12\x18\n" +
	"\x14INTERNAL_AGENT_ERROR\x10\x04B\x13Z\x11qwrap/pkg/qwrappbb\x06proto3"

var (
	file_qwrap_proto_rawDescOnce sync.Once
	file_qwrap_proto_rawDescData []byte
)

func file_qwrap_proto_rawDescGZIP() []byte {
	file_qwrap_proto_rawDescOnce.Do(func() {
		file_qwrap_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qwrap_proto_rawDesc), len(file_qwrap_proto_rawDesc)))
	})
	return file_qwrap_proto_rawDescData
}

var file_qwrap_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_qwrap_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_qwrap_proto_goTypes = []any{
	(AgentStatus)(0),                      // 0: qwrap_proto.AgentStatus
	(ChecksumAlgorithm)(0),                // 1: qwrap_proto.ChecksumAlgorithm
	(TransferEvent)(0),                    // 2: qwrap_proto.TransferEvent
	(ChunkErrorCode)(0),                   // 3: qwrap_proto.ChunkErrorCode
	(StreamPurposeRequest_Purpose)(0),     // 4: qwrap_proto.StreamPurposeRequest.Purpose
	(*StreamPurposeRequest)(nil),          // 5: qwrap_proto.StreamPurposeRequest
	(*ByteRange)(nil),                     // 6: qwrap_proto.ByteRange
	(*FileMetadata)(nil),                  // 7: qwrap_proto.FileMetadata
	(*AgentRegistrationRequest)(nil),      // 8: qwrap_proto.AgentRegistrationRequest
	(*AgentRegistrationResponse)(nil),     // 9: qwrap_proto.AgentRegistrationResponse
	(*AgentHeartbeat)(nil),                // 10: qwrap_proto.AgentHeartbeat
	(*HeartbeatResponse)(nil),             // 11: qwrap_proto.HeartbeatResponse
	(*GetFileMetadataRequest)(nil),        // 12: qwrap_proto.GetFileMetadataRequest
	(*FilePortionInfo)(nil),               // 13: qwrap_proto.FilePortionInfo
	(*GetFileMetadataResponse)(nil),       // 14: qwrap_proto.GetFileMetadataResponse
	(*TransferOptions)(nil),               // 15: qwrap_proto.TransferOptions
	(*TransferRequest)(nil),               // 16: qwrap_proto.TransferRequest
	(*ChunkInfo)(nil),                     // 17: qwrap_proto.ChunkInfo
	(*ChunkAssignment)(nil),               // 18: qwrap_proto.ChunkAssignment
	(*TransferPlan)(nil),                  // 19: qwrap_proto.TransferPlan
	(*ClientReport)(nil),                  // 20: qwrap_proto.ClientReport
	(*ChunkTransferStatus)(nil),           // 21: qwrap_proto.ChunkTransferStatus
	(*UpdatedTransferPlan)(nil),           // 22: qwrap_proto.UpdatedTransferPlan
	(*RegisterForPlanUpdatesRequest)(nil), // 23: qwrap_proto.RegisterForPlanUpdatesRequest
	(*ChunkRequest)(nil),                  // 24: qwrap_proto.ChunkRequest
	(*ChunkErrorResponse)(nil),            // 25: qwrap_proto.ChunkErrorResponse
	nil,                                   // 26: qwrap_proto.FileMetadata.CustomAttributesEntry
	nil,                                   // 27: qwrap_proto.AgentHeartbeat.CustomMetricsEntry
	(*timestamppb.Timestamp)(nil),         // 28: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),           // 29: google.protobuf.Duration
}
var file_qwrap_proto_depIdxs = []int32{
	4,  // 0: qwrap_proto.StreamPurposeRequest.purpose:type_name -> qwrap_proto.StreamPurposeRequest.Purpose
	1,  // 1: qwrap_proto.FileMetadata.checksum_algorithm:type_name -> qwrap_proto.ChecksumAlgorithm
	28, // 2: qwrap_proto.FileMetadata.last_modified:type_name -> google.protobuf.Timestamp
	26, // 3: qwrap_proto.FileMetadata.custom_attributes:type_name -> qwrap_proto.FileMetadata.CustomAttributesEntry
	29, // 4: qwrap_proto.AgentRegistrationResponse.heartbeat_interval:type_name -> google.protobuf.Duration
	28, // 5: qwrap_proto.AgentHeartbeat.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 6: qwrap_proto.AgentHeartbeat.status:type_name -> qwrap_proto.AgentStatus
	27, // 7: qwrap_proto.AgentHeartbeat.custom_metrics:type_name -> qwrap_proto.AgentHeartbeat.CustomMetricsEntry
	7,  // 8: qwrap_proto.GetFileMetadataResponse.global_file_metadata:type_name -> qwrap_proto.FileMetadata
	13, // 9: qwrap_proto.GetFileMetadataResponse.available_portions:type_name -> qwrap_proto.FilePortionInfo
	7,  // 10: qwrap_proto.TransferRequest.files_to_transfer:type_name -> qwrap_proto.FileMetadata
	15, // 11: qwrap_proto.TransferRequest.options:type_name -> qwrap_proto.TransferOptions
	6,  // 12: qwrap_proto.ChunkInfo.range:type_name -> qwrap_proto.ByteRange
	1,  // 13: qwrap_proto.ChunkInfo.checksum_algorithm:type_name -> qwrap_proto.ChecksumAlgorithm
	17, // 14: qwrap_proto.ChunkAssignment.chunk_info:type_name -> qwrap_proto.ChunkInfo
	28, // 15: qwrap_proto.ChunkAssignment.estimated_availability_time:type_name -> google.protobuf.Timestamp
	7,  // 16: qwrap_proto.TransferPlan.source_file_metadata:type_name -> qwrap_proto.FileMetadata
	18, // 17: qwrap_proto.TransferPlan.chunk_assignments:type_name -> qwrap_proto.ChunkAssignment
	15, // 18: qwrap_proto.TransferPlan.options:type_name -> qwrap_proto.TransferOptions
	28, // 19: qwrap_proto.ClientReport.report_timestamp:type_name -> google.protobuf.Timestamp
	21, // 20: qwrap_proto.ClientReport.chunk_statuses:type_name -> qwrap_proto.ChunkTransferStatus
	17, // 21: qwrap_proto.ChunkTransferStatus.chunk_info:type_name -> qwrap_proto.ChunkInfo
	2,  // 22: qwrap_proto.ChunkTransferStatus.event:type_name -> qwrap_proto.TransferEvent
	29, // 23: qwrap_proto.ChunkTransferStatus.transfer_duration:type_name -> google.protobuf.Duration
	18, // 24: qwrap_proto.UpdatedTransferPlan.new_or_updated_assignments:type_name -> qwrap_proto.ChunkAssignment
	17, // 25: qwrap_proto.UpdatedTransferPlan.invalidated_chunks:type_name -> qwrap_proto.ChunkInfo
	17, // 26: qwrap_proto.ChunkRequest.chunk_info_requested:type_name -> qwrap_proto.ChunkInfo
	3,  // 27: qwrap_proto.ChunkErrorResponse.error_code:type_name -> qwrap_proto.ChunkErrorCode
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_qwrap_proto_init() }
func file_qwrap_proto_init() {
	if File_qwrap_proto != nil {
		return
	}
	file_qwrap_proto_msgTypes[8].OneofWrappers = []any{}
	file_qwrap_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qwrap_proto_rawDesc), len(file_qwrap_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qwrap_proto_goTypes,
		DependencyIndexes: file_qwrap_proto_depIdxs,
		EnumInfos:         file_qwrap_proto_enumTypes,
		MessageInfos:      file_qwrap_proto_msgTypes,
	}.Build()
	File_qwrap_proto = out.File
	file_qwrap_proto_goTypes = nil
	file_qwrap_proto_depIdxs = nil
}
